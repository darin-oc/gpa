{"name":"GPA Comparison Calculator","tagline":"Comparing the old and new GPA schemes","body":"# GPA Comparison Calculator\r\n\r\n> The Board of Undergraduate Studies introduces a revised Grade Point Average (GPA) effective Semester I 2014/2015. Visit the http://www.uwi.edu/undergraduatestudies/gpascheme.aspx page to learn about the changes and the benefits.\r\n\r\nWritten by Darin Brathwaite (darin.brathwaite@open.uwi.edu) and Reiza Haniff (reiza.haniff@open.uwi.edu).\r\n\r\nMaintained by Darin Brathwaite (darin.brathwaite@open.uwi.edu).\r\n\r\n## Usage / Installation\r\nThis GPA calculator is a client-side application written in JavaScript. This means that there is no server-side language processing and it has a very small server-side overhead. All you need to do is to place the directory on your web server. The foot print of this app is less than 10 MB on the web server.\r\nThe `/app` directory contains all the raw files for the application. The `/dist` directory contains the minified version of the application. Minified files means faster loading of the application by clients.\r\n\r\nTo install, place the files and folders of **either** `/app` or `/dist` in the public facing directory of your web server.\r\n\r\n## Configuration\r\nUse the **config.json** file to configure the default settings of the app. The instructions for each **\"setting\"** can found in the **\"_comment_setting\"**. For example, the instructions for setting the `\"defaultCampus\"` can be found in `\"_comment_defaultCampus\"`.\r\n```json\r\n\"_comment_defaultCampus\"  : \"Can be set to null, open, mona, cave or sta\",\r\n\"defaultCampus\"           : \"open\",\r\n```\r\n\r\n`\"studentProgrammeRecordURI\"` is used to automatically load student's programme records if your student management system has a web services API. `\"studentProgrammeRecordURI\"` expects the response to be in json format. \r\nAn example of the expected json response is shown below (also see the example.json file).\r\n```json\r\n{\r\n  \"sar\": [\r\n    {\r\n      \"term_code\": \"201210\",\r\n      \"course_code\": \"ACCT1002\",\r\n      \"course_type_name\": \"Core\",\r\n      \"grade\": \"B\",\r\n      \"grade_point\": \"9\",\r\n      \"program_levels_name\": \"Level 1\",\r\n      \"quality_hours\": \"3\",\r\n      \"quality_points\": \"3\"\r\n    },\r\n    {\r\n      \"term_code\": \"201220\",\r\n      \"course_code\": \"ECON1003\",\r\n      \"course_type_name\": \"Core\",\r\n      \"grade\": \"C-\",\r\n      \"grade_point\": \"5.1\",\r\n      \"program_levels_name\": \"Level 1\",\r\n      \"quality_hours\": \"3\",\r\n      \"quality_points\": \"1.7\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n`\"coursesURI\"` is used to load all of the courses you wish to appear in the app. This can be from a json response from your student management system or a .json file in the app itself. `\"coursesURI\"` expects the response to contain an array named `\"courses\"` and each object is a course with `\"name\"` and `\"group\"`. The `\"group\"` value is the course's prefix and is used to group the courses in the option select menu for Course in the app.\r\n\r\n## How to use the app\r\n1. Select a **Campus** and a **Faculty** if available\r\n2. Click on the **Add Course** button to add courses and grades to the list\r\n3. In the **Add your courses** window, each row represents a course. \r\n    * Select all the values for a particular course. Each selection will turn green when a valule is selected. \r\n    * To add another course click the green circle with the plus sign\r\n    * To delete a course click the red circle with the minus sign\r\n    * Save the selected courses to add them to the calculator\r\n4. To remove a course from the calculator click on the red circle with the cross\r\n5. To Exclude a course from the calculations uncheck the check box to the left of the course\r\n6. The results for **Prior GPA Scheme** and **Current GPA Scheme** along with the **Combined GPAs** are shown below the courses\r\n7. To learn how the combined GPAs were calculated click on the formula's name\r\n \r\n## Dealing with javascript's floating point precision\r\n\r\nJavascript's floating point precision issues are well documented http://stackoverflow.com/questions/11695618/dealing-with-float-precision-in-javascript . To work around this, the **big.js** library http://mikemcl.github.io/big.js/ is used for all calculations in the GPA calculator.\r\n\r\n## Formulas used in calulations\r\n### GPA conversion\r\nClass | Formula\r\n--------- | ----------\r\n**Upper Class** | newGpa = oldGpa\r\n**Upper Second** | newGpa = ((49 * oldGpa) + 149.5) / 99\r\n**Lower Second** | newGpa = ((49 * oldGpa) + 149) / 99\r\n**Pass** | newGpa = (199 * oldGpa) / 99\r\n```js\r\nconvertOldToNewGpaUsingFormula: function (oldGpa) {\r\n  if (parseFloat(oldGpa) > 2.99) {\r\n    return oldGpa;\r\n  }\r\n  else if ((parseFloat(oldGpa) <= 2.99) && (parseFloat(oldGpa) > 1.99)) {\r\n    // ((49 * oldGpa) + 149.5) / 99\r\n    return ((new Big(49).times(oldGpa)).plus(149.5)).div(99).toFixed(2);\r\n  }\r\n  else if ((parseFloat(oldGpa) <= 1.99) && (parseFloat(oldGpa) > 0.99)) {\r\n    // ((49 * oldGpa) + 149) / 99\r\n    return ((new Big(49).times(oldGpa)).plus(149)).div(99).toFixed(2);\r\n  }\r\n  else if (parseFloat(oldGpa) <= 0.99) {\r\n    // (199 * oldGpa) / 99\r\n    return (new Big(199).times(oldGpa)).div(99).toFixed(2);\r\n  }\r\n}\r\n```\r\n### Grade points\r\ngradePoints = qualityHours * qualityPoints\r\n```js\r\nfunction calculate (qualityHours, qualityPoints) {\r\n  var gradePoints = 0;\r\n  if(qualityHours && qualityPoints){\r\n    // qualityHours * qualityPoints\r\n    gradePoints = new Big(qualityHours).times(qualityPoints);\r\n    gradePoints = gradePoints.toFixed(2);\r\n  else{\r\n    gradePoints = 0.00;\r\n  }\r\n  return gradePoints;\r\n}\r\n```\r\n### GPA\r\ngpa = oldGpaTotalGradePoints / oldGpaTotalQualityHours\r\n```js\r\nfunction gpaCalculation (oldGpaTotalGradePoints, oldGpaTotalQualityHours) {\r\n  var gpa = 0;\r\n  if(oldGpaTotalGradePoints && oldGpaTotalQualityHours && (oldGpaTotalGradePoints != 0) && (oldGpaTotalQualityHours != 0)){\r\n    // oldGpaTotalGradePoints / oldGpaTotalQualityHours\r\n    gpa = new Big(oldGpaTotalGradePoints).div(new Big(oldGpaTotalQualityHours));\r\n  }\r\n  else{\r\n    gpa = 0;\r\n  }\r\n  gpa = gpa.toFixed(2);\r\n  return gpa;\r\n}\r\n```\r\n### Combined GPA\r\ncombinedGpa = (priorGpaProduct + currentGpaProduct) / (totalHours)\r\n```js\r\nfunction combinedGpaFormula (priorGpaHours, priorGpa, currentGpaHours, currentGpa) {\r\n  var combinedGpa = 0, fixedCombinedGpa, priorGpaProduct, currentGpaProduct, totalHours;\r\n\r\n  totalHours = priorGpaHours + currentGpaHours;\r\n  if ((typeof totalHours === 'undefined') || (totalHours === null) || (isNaN(totalHours)) || (totalHours === 0)) {\r\n    combinedGpa = 0;\r\n  }\r\n  else {\r\n    priorGpaProduct   = (new Big(priorGpaHours).times(priorGpa)).toFixed(2);\r\n    currentGpaProduct = (new Big(currentGpaHours).times(currentGpa)).toFixed(2);\r\n    combinedGpa       = (new Big(priorGpaProduct).plus(currentGpaProduct)).div(new Big(totalHours));\r\n  }\r\n  fixedCombinedGpa = combinedGpa.toFixed(3);\r\n  return fixedCombinedGpa.toString();\r\n}\r\n```\r\n### GNU General Public License\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}